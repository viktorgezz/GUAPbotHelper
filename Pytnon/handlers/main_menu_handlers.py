# main_menu_handlers.py

from aiogram import types
from aiogram.dispatcher import FSMContext

from bot_instance import bot
from keyboards import start_keyboard, submittting_aplication_keyboard, document_examples_keyboard, back_keyboard
from states import MenuStates, SubmitttingAplicationStates, ReceptionCalendarStates, OtherStates, FAQStates, DirectonsStates, ElasticSearchStates, EGEStates
from .submtion_aplication import submiting_aplication_menu
from .reception_calendar import reception_calendar_menu
from .other import other_menu
from .faq import faq_menu
from .directions import directions_menu
from .elastic_handlers import elastic_handler
from .EGE import ask_points_rus


async def send_welcome(message: types.Message, state: FSMContext):
    await MenuStates.MAIN_MENU.set()
    await message.answer("ü§ö –ü—Ä–∏–≤–µ—Ç!\n"
                         "ü§ñ –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –ì–£–ê–ü\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard)

async def process_menu(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è":
        await SubmitttingAplicationStates.MENU.set()
        await submiting_aplication_menu(message, state)

    if message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏–µ–º–∞":
        await ReceptionCalendarStates.MENU.set()
        await reception_calendar_menu(message, state)


    if message.text == "–î—Ä—É–≥–æ–µ":
        await OtherStates.MENU.set()
        await other_menu(message, state)


    if message.text == "FAQ":
        await FAQStates.MENU.set()
        await faq_menu(message, state)

    if message.text == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏":
        await DirectonsStates.MENU.set()
        await directions_menu(message, state)


    if message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É":
        await ElasticSearchStates.ASK_QUESTION.set()
        await elastic_handler(message, state)

    if message.text == "–ï–ì–≠":
        await EGEStates.ASK_POINTS_RUS.set()
        await ask_points_rus(message, state)








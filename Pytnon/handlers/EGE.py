from aiogram import types
from aiogram.dispatcher import FSMContext

from bot_instance import bot
from keyboards import start_keyboard, ege_keyboard, subject_keyboard, back_keyboard
from states import MenuStates, EGEStates
from EGE_calc import ChoiseDirections



async def ask_points_rus(message: types.Message, state: FSMContext):
    await EGEStates.ASK_POINTS_RUS.set()
    await bot.send_message(message.chat.id, "üì± –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –ï–ì–≠.\n\n‚úÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ —è –≤—ã—à–ª—é –≤–∞–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ!", reply_markup=types.ReplyKeyboardRemove())
    await bot.send_message(message.chat.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É:", reply_markup=back_keyboard)




async def process_ask_points_rus(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await MenuStates.MAIN_MENU.set()
        await bot.send_message(message.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               reply_markup=start_keyboard)

    else:
        try:
            points_rus = int(message.text)
            if points_rus < 0 or points_rus > 100:
                await bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                await ask_points_rus(message, state)
            else:
                await state.update_data(points_rus=points_rus)
                await bot.send_message(message.chat.id, "‚ùî –ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –≤—ã —Å–¥–∞–≤–∞–ª–∏?", reply_markup=ege_keyboard)
                await EGEStates.ASK_POINTS_MATH.set()
        except:
            await bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            await ask_points_rus(message, state)



async def ask_points_math(callback_data: types.CallbackQuery, state: FSMContext):
    if callback_data.data == "answer_2":
        data = await state.get_data()
        points_rus = data.get('points_rus')
        await EGEStates.ASK_POINTS.set()
        await bot.send_message(callback_data.from_user.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:")
    if callback_data.data == "answer_1":
        await state.update_data(points_math=0)
        await EGEStates.ASK_DOP_SUBJ_POINTS.set()
        await bot.send_message(callback_data.from_user.id, "‚ùî –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã –µ—â–µ —Å–¥–∞–≤–∞–ª–∏:",
                               reply_markup=subject_keyboard)


async def process_ask_points_math(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await MenuStates.MAIN_MENU.set()
        await bot.send_message(message.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               reply_markup=start_keyboard)

    else:
        try:
            points_math = int(message.text)
            if points_math < 0 or points_math > 100:
                await bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                await bot.send_message(message.from_user.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:")
            else:
                await state.update_data(points_math=points_math)
                await EGEStates.ASK_DOP_SUBJ_POINTS.set()
                await bot.send_message(message.chat.id, "‚ùî –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã –µ—â–µ —Å–¥–∞–≤–∞–ª–∏:", reply_markup=subject_keyboard)
        except:
            await bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            await bot.send_message(message.from_user.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:")

async def ask_points(callback_data: types.CallbackQuery, state: FSMContext):
    await state.update_data(subj = callback_data.data)
    await EGEStates.GET_DOP_SUBJ_POINTS.set()
    await bot.send_message(callback_data.from_user.id, f"üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ {callback_data.data}:")


async def get_points(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await MenuStates.MAIN_MENU.set()
        await bot.send_message(message.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               reply_markup=start_keyboard)

    else:
        try:
            await state.update_data(subj_points=message.text)
            data = await state.get_data()
            subjects = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", data.get('subj')]
            points = int(message.text)
            if points < 0 or points > 100:
                await bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                await bot.send_message(message.from_user.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É:")
            else:
                CD = ChoiseDirections(subjects, int(data.get('points_rus')) + int(data.get('points_math')) + points)
                info = CD.get_directions()
                mes = "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
                for dir in info:
                    mes += (f"üîπ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n {dir['description']}\n  {dir['name']}\n"
                                f"‚úèÔ∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å:</b>\n  {dir['focus']}\n"
                                f"üëâ <b>–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞:</b>\n  {dir['passing_points']}\n\n\n"
                                )

                if mes == "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n":
                    mes += '-'


                await bot.send_message(message.chat.id, mes, parse_mode="HTML")

        except:
            await bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –±–∞–ª–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            await bot.send_message(message.from_user.id, "üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É:")









